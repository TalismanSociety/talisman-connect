"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initWasm = initWasm;
exports.setWasmPromise = setWasmPromise;
exports.setWasmPromiseFn = setWasmPromiseFn;

var _util = require("@polkadot/util");

var _wasmCryptoWasm = require("@polkadot/wasm-crypto-wasm");

var _bridge = require("./bridge.cjs");

var wbg = _interopRequireWildcard(require("./imports.cjs"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
async function createPromise(wasmBytes, asmFn) {
  try {
    (0, _util.assert)(typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
    const source = await WebAssembly.instantiate(wasmBytes, {
      wbg
    });
    _bridge.__bridge.wasm = source.instance.exports;
  } catch (error) {
    // if we have a valid supplied asm.js, return that
    if (asmFn) {
      _bridge.__bridge.type = 'asm';
      _bridge.__bridge.wasm = asmFn(wbg);
    } else {
      console.error(`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${error.message}`);
      _bridge.__bridge.wasm = null;
    }
  }
}

function setWasmPromise(wasmBytes, asmFn) {
  _bridge.__bridge.wasmPromise = createPromise(wasmBytes, asmFn);
  return _bridge.__bridge.wasmPromise;
}

function setWasmPromiseFn(fn) {
  _bridge.__bridge.wasmPromiseFn = fn;
}

function initWasm() {
  return setWasmPromise(_wasmCryptoWasm.wasmBytes, null);
}