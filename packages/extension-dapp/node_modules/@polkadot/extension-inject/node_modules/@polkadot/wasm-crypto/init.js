// Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { assert } from '@polkadot/util';
import { wasmBytes } from '@polkadot/wasm-crypto-wasm';
import { __bridge } from "./bridge.js";
import * as wbg from "./imports.js";

async function createPromise(wasmBytes, asmFn) {
  try {
    assert(typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
    const source = await WebAssembly.instantiate(wasmBytes, {
      wbg
    });
    __bridge.wasm = source.instance.exports;
  } catch (error) {
    // if we have a valid supplied asm.js, return that
    if (asmFn) {
      __bridge.type = 'asm';
      __bridge.wasm = asmFn(wbg);
    } else {
      console.error(`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${error.message}`);
      __bridge.wasm = null;
    }
  }
}

export function setWasmPromise(wasmBytes, asmFn) {
  __bridge.wasmPromise = createPromise(wasmBytes, asmFn);
  return __bridge.wasmPromise;
}
export function setWasmPromiseFn(fn) {
  __bridge.wasmPromiseFn = fn;
}
export function initWasm() {
  return setWasmPromise(wasmBytes, null);
}